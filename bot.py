import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from dotenv import load_dotenv
import openai

load_dotenv()

# {chat_id: [messages]}
group_messages = {}
storage_lock = asyncio.Lock()

async def save_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    if not update.message or not update.message.text:
        return
    
    chat_id = update.effective_chat.id
    text = f"{update.message.from_user.name}: {update.message.text}"
    
    async with storage_lock:
        if chat_id not in group_messages:
            group_messages[chat_id] = []
        group_messages[chat_id].append(text)

async def summarize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /summarize"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    async with storage_lock:
        if chat_id not in group_messages or not group_messages[chat_id]:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        messages = group_messages.pop(chat_id)
        text_to_process = "\n".join(messages[:100])  # –õ–∏–º–∏—Ç 100 —Å–æ–æ–±—â–µ–Ω–∏–π
    
    try:
        summary = await get_deepseek_summary(text_to_process)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üìå –°–≤–æ–¥–∫–∞ –∏–∑ —á–∞—Ç–∞ {update.effective_chat.title}\n\n{summary}"
            )
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ
            await update.message.delete()
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º!")

    except Exception as e:
        async with storage_lock:
            group_messages[chat_id] = messages + group_messages.get(chat_id, [])
        
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

async def get_deepseek_summary(text: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
    api_key = os.getenv("DEEPSEEK_API_KEY")
    client = openai.Client(base_url="http://zeliboba.yandex-team.ru/balance/deepseek_r1/v1", api_key="EMPTY")
    
    custom_headers = {
    'X-Model-Discovery-Oauth-Token': api_key,
    'X-Model-Discovery-Enable-Client-Ping': '0'
    }
    prompt = f'''
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ. 
    –ú–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–π, –∫—Ç–æ –∏ —Å –∫–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª, –æ —á–µ–º —à–ª–∞ —Ä–µ—á—å, –∫–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã 
    –∏–ª–∏ –∫–∞–∫–∏–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã, –∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –û–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏—è –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –¥–µ—Ç–∞–ª—è—Ö. –ù–µ —Ä–∞—Å—Å—É–∂–¥–∞–π. –û—Ç–ø—Ä–∞–≤—å –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{text}
    '''
    response = client.chat.completions.create(
        model="deepseek",
        messages=[{
            "role": "user", 
            "content": prompt
            },
        ],
    temperature=0,
    max_tokens=4096,
    extra_headers=custom_headers
    )
    response.raise_for_status()
    return response.json()['choices'][0]['message']['content']

def main():
    app = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
    
    # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
    app.add_handler(MessageHandler(
        filters.ChatType.GROUPS & filters.TEXT & ~filters.COMMAND,
        save_group_message
    ))
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –≥—Ä—É–ø–ø–∞—Ö, –∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    app.add_handler(CommandHandler("summarize", summarize))
    
    print("Bot started in group mode")
    app.run_polling()

if __name__ == "__main__":
    main()
